AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Basic VPC Knab Docker
Parameters:
  VPCCIDR:
    Type: String
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
    Description: Provide VPC CIDR /23 range.
  PubSubaCIDR:
    Type: String
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
    Description: Provide first public subnet A CIDR /24 range.
  


Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
      
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PubSubaCIDR
      VpcId: !Ref VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref AWS::StackName
              - "PublicSubnetA"
       
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - Key: Name
            Value: !Join
              - ""
              - - !Ref AWS::StackName
                - "InternetGW"
    
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref AWS::StackName
              - "-PublicSA"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  EC2NetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref AWS::StackName
              - "-NACL"

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref EC2NetworkAcl
  
  AclOut1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 20

  AclOut12:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 30

  AclOut13:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 40

  AclIn1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 22
          To: 22
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 10

  AclIn2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 20

  AclIn3:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 8080
          To: 8080
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 30

  AclIn4:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 40

  AclIn5:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref EC2NetworkAcl
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 50

  SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH and Docker"
      GroupName: "SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref AWS::StackName
              - "-SecGroup"
      
  dockernginx:
    Type: AWS::EC2::Instance
    CreationPolicy:
        ResourceSignal:
          Timeout: PT5M
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          docker_bootstrap:
            - install_docker
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"
          commands:
            docker_for_ec2_user:
              command: chkconfig docker on
            
    Properties:
      KeyName: linuxssh
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref SecurityGroupSSH
    
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -s ${AWS::StackId} --resource dockernginx --configsets docker_bootstrap --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource dockernginx --region ${AWS::Region}
            docker pull nginx
            docker run --name knab-nginx -d --restart unless-stopped -p 8080:80 nginx
   
Outputs:
 StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    
 InstanceIP:
      Value: !GetAtt dockernginx.PublicIp
      Description: Instance public IP
